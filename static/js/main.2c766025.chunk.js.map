{"version":3,"sources":["context/actions.ts","structs/Vector.ts","physics/constants.ts","structs/Spring.ts","structs/Point.ts","structs/Wall.ts","physics/physicsCore.ts","context/ModelContext.tsx","App.tsx","index.tsx"],"names":["ActionsType","createAction","type","payload","Vector","x","y","this","TIME_STEP","Spring","startPoint","endPoint","_rate","_KD","defaultLength","normal","getLength","getNormalVector","Math","sqrt","startPointVelocity","getVelocity","endPointVelocity","currentLength","f","length","Point","velocity","force","spring","console","debug","point","Wall","calculateForces","points","pressure","forEach","setForce","map","volume","getSpringForce","currentStartForce","getForce","currentEndForce","springLength","abs","springPressure","pointForce","r","e","gradPotential","tfs","ModelContext","createContext","ModelContextProvider","children","useState","balloonCenter","pointsCount","balloonRadius","initialConditions","setInitialConditions","mainLooper","setMainLooper","walls","TFS","modelState","setModelState","useEffect","createPhysicsState","center","i","push","cos","PI","sin","attachSpring","stopModeling","clearInterval","Provider","value","action","START_MODELING","setInterval","PRESSURE","state","velocities","setVelocity","vel","integrate","PAUSE_MODELING","STOP_MODELING","CHANGE_INITIAL_CONDITIONS","newInitialConditions","initCond","canvasSize","App","useContext","data","handler","canvasRef","useRef","connectCanvas","func","current","getContext","renderPoints","context","beginPath","moveTo","arc","fillStyle","fill","strokeStyle","lineTo","stroke","closePath","renderWalls","wall","clearCanvas","clearRect","className","ref","width","height","onClick","min","max","onChange","target","parseInt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c766025.chunk.js","sourcesContent":["export enum ActionsType {\n  START_MODELING,\n  PAUSE_MODELING,\n  STOP_MODELING,\n  CHANGE_INITIAL_CONDITIONS\n}\n\nexport interface Action {\n  type: ActionsType,\n  payload?: any\n}\n\nexport const createAction = (type: ActionsType, payload?: any): Action => ({\n  type,\n  payload\n})\n","export class Vector<T> {\n  x: T\n  y: T\n  constructor(x: T, y: T) {\n    this.x = x\n    this.y = y\n  }\n}\n","export const PRESSURE: number = 150\nexport const SPRING_RATE: number = 2500.0\nexport const MASS: number = 1\nexport const FPS: number = 60\nexport const TIME_STEP: number = 0.02\n\n","import { Point } from './Point'\nimport { Vector } from './Vector'\nimport { SPRING_RATE } from '../physics/constants'\n\nexport class Spring {\n  // Spring constants\n  private _rate = SPRING_RATE\n  private _KD = 65.0\n\n  startPoint: Point\n  endPoint: Point\n  defaultLength: number\n  normal: Vector<number>\n\n  constructor(startPoint: Point, endPoint: Point) {\n    this.startPoint = startPoint\n    this.endPoint = endPoint\n    this.defaultLength = this.getLength()\n    this.normal = this.getNormalVector()\n  }\n\n  getLength(): number {\n    return Math.sqrt(\n      (this.startPoint.x - this.endPoint.x) ** 2 + (this.startPoint.y - this.endPoint.y) ** 2\n    )\n  }\n\n  getSpringForce(): Vector<number> {\n    const startPointVelocity: Vector<number> = this.startPoint.getVelocity()\n    const endPointVelocity: Vector<number> = this.endPoint.getVelocity()\n    const diffVelocity: Vector<number> = new Vector<number>(\n      startPointVelocity.x - endPointVelocity.x,\n      startPointVelocity.y - endPointVelocity.y\n    )\n    const currentLength = this.getLength()\n\n    const f = (currentLength - this.defaultLength) * this._rate\n\n    const force: Vector<number> = new Vector<number>(\n      ((this.startPoint.x - this.endPoint.x) / currentLength) * f,\n      ((this.startPoint.y - this.endPoint.y) / currentLength) * f\n    )\n\n    return force\n  }\n\n  getNormalVector(): Vector<number> {\n    const length = this.getLength()\n    return new Vector<number>(\n      -(this.startPoint.y - this.endPoint.y) / length,\n      (this.startPoint.x - this.endPoint.x) / length\n    )\n  }\n}\n","import { Spring } from './Spring'\nimport { Vector } from './Vector'\n\nexport class Point {\n  x: number\n  y: number\n  private velocity: Vector<number> // px in step\n  private force: Vector<number>\n  spring?: Spring\n\n  constructor(x: number, y: number, velocity?: Vector<number>) {\n    this.x = x\n    this.y = y\n    this.velocity = velocity ? velocity : new Vector<number>(0, 0)\n    this.force = new Vector<number>(0, 0)\n    console.debug('point created')\n  }\n\n  attachSpring(point: Point): void {\n    this.spring = new Spring(this, point)\n  }\n\n  setVelocity(velocity: Vector<number>): void {\n    this.velocity = velocity\n  }\n\n  getVelocity(): Vector<number> {\n    return this.velocity\n  }\n\n  getForce(): Vector<number> {\n    return this.force\n  }\n\n  setForce(force: Vector<number>): void {\n    this.force = force\n  }\n}\n","import { Point } from './Point'\n\nexport class Wall {\n  startPoint: Point\n  endPoint: Point\n\n  constructor(startPoint: Point, endPoint: Point) {\n    this.startPoint = startPoint\n    this.endPoint = endPoint\n  }\n}\n","import { Point } from '../structs/Point'\nimport { Vector } from '../structs/Vector'\nimport { MASS, TIME_STEP } from './constants'\nimport { ModelData } from '../context/ModelContext'\nimport { Spring } from '../structs/Spring'\n\nexport const integrate = (state: ModelData): Point[] => {\n  console.debug(state)\n  const velocities: Vector<number>[] = []\n  let points = state.points\n\n  points = points.map(point => {\n    const velocity: Vector<number> = point.getVelocity()\n    const force: Vector<number> = point.getForce()\n\n    point.x += velocity.x * TIME_STEP + 0.5 * (force.x / MASS) * TIME_STEP * TIME_STEP\n    point.y += velocity.y * TIME_STEP + 0.5 * (force.y / MASS) * TIME_STEP * TIME_STEP\n\n    console.debug(`x=${point.x} y=${point.y}`)\n\n    velocities.push(new Vector<number>(\n      velocity.x + 0.5 * (force.x / MASS) * TIME_STEP,\n      velocity.y + 0.5 * (force.y / MASS) * TIME_STEP\n    ))\n    return point\n  })\n\n  points = calculateForces(points, state.pressure)\n\n  for (let i = 0; i < points.length; i++) {\n    let force = points[i].getForce()\n    points[i].setVelocity(new Vector<number>(\n      velocities[i].x + 0.5 * force.x / MASS * TIME_STEP,\n      velocities[i].y + 0.5 * force.y / MASS * TIME_STEP\n    ))\n  }\n\n  const vel = points[0].getVelocity()\n  console.debug(`velocity x = ${vel.x}, y=${vel.y}`)\n\n  return points\n}\n\nconst gradPotential = (r: number) => {\n  const e = 10**(-10)\n  const a = 1\n  return 24 * a**6 * e * (-2 * a**6 + r**6) / r**13\n}\n\n\nexport const calculateForces = (points: Point[], pressure: number): Point[] => {\n  // Remove forces from previous iterations\n  points.forEach(point => point.setForce(new Vector<number>(0, 0)))\n  // Get all unique springs\n  const springs: Array<Spring | undefined> = points.map(point => point.spring)\n\n  let volume = 0.\n\n  points.forEach((point) => {\n    const spring: Spring = point.spring!\n\n    const force: Vector<number> = spring.getSpringForce()\n    const springLength = spring.getLength()\n\n    let currentStartForce = spring.startPoint.getForce()\n    let currentEndForce = spring.endPoint.getForce()\n\n    //Update force for start point\n    spring.startPoint.setForce(new Vector<number>(\n      currentStartForce.x - force.x,\n      currentStartForce.y - force.y\n    ))\n\n    //Update force for end point\n    spring.endPoint.setForce(new Vector<number>(\n      currentEndForce.x + force.x,\n      currentEndForce.y + force.y\n    ))\n\n  })\n\n  points.forEach(point => {\n    const spring = point.spring!\n    const springLength = spring.getLength()\n    // Update normal to a spring\n    spring.normal = spring.getNormalVector()\n\n    // Calculate the volume\n    volume += 0.5 * Math.abs(spring.startPoint.x - spring.endPoint.x) * Math.abs(spring.normal.x) * springLength\n  })\n\n  points.forEach(points => {\n    const spring = points.spring!\n\n    const force: Vector<number> = spring.getSpringForce()\n    const springLength = spring.getLength()\n\n    const currentStartForce = spring.startPoint.getForce()\n    const currentEndForce = spring.endPoint.getForce()\n\n    // Pressure\n    let springPressure = springLength * pressure / volume\n\n    //Update force for start point\n    spring.startPoint.setForce(new Vector<number>(\n      currentStartForce.x + spring.normal.x * springPressure,\n      currentStartForce.y + spring.normal.y * springPressure\n    ))\n\n    //Update force for end point\n    spring.endPoint.setForce(new Vector<number>(\n      currentEndForce.x + spring.normal.x * springPressure,\n      currentEndForce.y + spring.normal.y * springPressure\n    ))\n  })\n\n  points.forEach(point => {\n    const pointForce = point.getForce()\n\n    point.setForce(new Vector<number>(\n      pointForce.x - gradPotential(Math.abs(point.x - 100)),\n      pointForce.y\n    ))\n  })\n\n  return points\n}\n","import {createContext, FC, PropsWithChildren, useEffect, useState} from 'react'\nimport {Point} from '../structs/Point'\nimport {Action, ActionsType} from './actions'\nimport {Wall} from '../structs/Wall'\nimport {calculateForces, integrate} from '../physics/physicsCore'\nimport {PRESSURE, TIME_STEP} from '../physics/constants'\nimport {Vector} from '../structs/Vector'\n\nlet pressure = 0\nlet tfs = 0\n\nexport interface ModelData {\n  points: Point[]\n  walls: Wall[]\n  pressure: number\n  // Time from start\n  TFS: number\n}\n\ninterface InitialConditionType {\n  pointsCount: number\n  balloonCenter: [x: number, y: number] | 'center' | 'close' | 'far'\n  balloonRadius: number\n}\n\nexport type ModelType = [ModelData, InitialConditionType, (arg0: Action) => void]\n\n// I know it's bad :|\n// @ts-ignore\nexport const ModelContext = createContext<ModelType>(null)\n\nexport const ModelContextProvider: FC<PropsWithChildren<{}>> = ({\n                                                                  children\n                                                                }) => {\n  const [initialConditions, setInitialConditions] = useState<InitialConditionType>({\n    balloonCenter: 'close',\n    pointsCount: 20,\n    balloonRadius: 50\n  })\n  const [mainLooper, setMainLooper] = useState<NodeJS.Timeout>()\n  const [modelState, setModelState] = useState<ModelData>({\n    points: [],\n    walls: [],\n    pressure: 0,\n    TFS: 0\n  })\n\n  // initial state\n  useEffect(() => {\n    createPhysicsState()\n  }, [initialConditions])\n\n  const createPhysicsState = () => {\n    let walls: Wall[] = [\n      new Wall(\n        new Point(100, 600),\n        new Point(100, 100)\n      )\n    ]\n\n    let center: Point = new Point(350, 350)\n\n    switch (initialConditions.balloonCenter) {\n      case 'far':\n        center = new Point(500, 350)\n        break\n      case 'close':\n        center = new Point(100 + initialConditions.balloonRadius + 10, 350)\n        break\n      default:\n    }\n\n    let points: Point[] = []\n\n    for (let i = 0; i < initialConditions.pointsCount; i++) {\n      points.push(\n        new Point(\n          center.x + initialConditions.balloonRadius * Math.cos(i * 2 * Math.PI / initialConditions.pointsCount),\n          center.y + initialConditions.balloonRadius * Math.sin(i * 2 * Math.PI / initialConditions.pointsCount),\n          new Vector<number>(-1, 0)\n        )\n      )\n      if (i >= 1) {\n        points[i - 1].attachSpring(points[i])\n        if (i === initialConditions.pointsCount - 1) {\n          points[i].attachSpring(points[0])\n        }\n      }\n    }\n\n    points = calculateForces(points, modelState.pressure)\n    setModelState({...modelState, walls: walls, points: points})\n  }\n\n  const stopModeling = () => {\n    if (mainLooper) {\n      clearInterval(mainLooper)\n    }\n  }\n\n  const validateIC = (initCond: InitialConditionType) => {\n    return !(initCond.balloonRadius < 25 || initCond.balloonRadius > 100 ||\n      initCond.pointsCount < 5 || initCond.pointsCount > 50)\n  }\n\n  const handler = (action: Action) => {\n    console.debug(`action ${action.type}`)\n    switch (action.type) {\n      case ActionsType.START_MODELING:\n        setMainLooper(setInterval(() => {\n          if (pressure < PRESSURE) {\n            pressure += PRESSURE / 100\n          }\n          const points = integrate({...modelState, pressure: pressure})\n          tfs = tfs + TIME_STEP\n          setModelState({...modelState, points: points, TFS: tfs})\n        }, TIME_STEP))\n        break\n      case ActionsType.PAUSE_MODELING:\n        stopModeling()\n        break\n      case ActionsType.STOP_MODELING:\n        stopModeling()\n        createPhysicsState()\n        break\n      case ActionsType.CHANGE_INITIAL_CONDITIONS:\n        stopModeling()\n        const newInitialConditions = {\n          ...initialConditions,\n          ...action.payload\n        }\n        if (validateIC(newInitialConditions)) {\n          setInitialConditions(newInitialConditions)\n        }\n\n        break\n    }\n  }\n\n  return (\n    <ModelContext.Provider value={[modelState, initialConditions, handler]}>{children}</ModelContext.Provider>\n  )\n}\n","import React, {useContext, useEffect, useRef} from 'react'\nimport './App.css'\nimport {ActionsType, createAction} from './context/actions'\nimport {ModelContext} from './context/ModelContext'\n\nconst canvasSize = {\n  width: 700,\n  height: 700\n}\n\nfunction App() {\n  const [data, initialConditions, handler] = useContext(ModelContext)\n\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n\n  const connectCanvas = (func: (canvas: CanvasRenderingContext2D) => void) => () => func(canvasRef.current!.getContext('2d')!)\n\n  const renderPoints = connectCanvas((context): void => {\n    data.points.forEach((point) => {\n      context.beginPath()\n      context.moveTo(point.x, point.y)\n      context.arc(point.x, point.y, 5, 0, 2 * Math.PI, false)\n      context.fillStyle = 'green';\n      context.fill();\n      context.strokeStyle = 'blue'\n\n      const spring = point.spring!\n      context.moveTo(spring.startPoint.x, spring.startPoint.y)\n      context.lineTo(spring.endPoint.x, spring.endPoint.y)\n\n      context.stroke()\n      context.closePath()\n    })\n  })\n\n  const renderWalls = connectCanvas((context): void => {\n    data.walls.forEach((wall) => {\n      context.beginPath()\n      context.strokeStyle = 'black'\n      context.moveTo(wall.startPoint.x, wall.startPoint.y)\n      context.lineTo(wall.endPoint.x, wall.endPoint.y)\n      context.stroke()\n      context.closePath()\n    })\n  })\n\n  const clearCanvas = connectCanvas((context): void => {\n    context.clearRect(0, 0, canvasSize.width, canvasSize.height)\n  })\n\n  useEffect(() => {\n    clearCanvas()\n    renderPoints()\n    renderWalls()\n  }, [data])\n\n  return (\n    <div className=\"App\">\n      <canvas ref={canvasRef} width={canvasSize.width} height={canvasSize.height}/>\n      <button\n        onClick={() => handler(createAction(ActionsType.START_MODELING))}\n      >\n        Start\n      </button>\n      <button\n        onClick={() => handler(createAction(ActionsType.PAUSE_MODELING))}\n      >\n        Pause\n      </button>\n      <button\n        onClick={() => handler(createAction(ActionsType.STOP_MODELING))}\n      >\n        Stop\n      </button>\n      {/*<div>Time from start: {data.TFS.toFixed(2)} s</div>*/}\n      <input type=\"number\"\n             value={initialConditions.pointsCount}\n             min={5}\n             max={50}\n             onChange={e => {\n               handler(\n                 createAction(\n                   ActionsType.CHANGE_INITIAL_CONDITIONS,\n                   {pointsCount: e.target.value}\n                 )\n               )\n               console.debug(e.target.value)\n             }}\n      />\n      <input type=\"number\"\n             value={initialConditions.balloonRadius}\n             min={25}\n             max={100}\n             onChange={e => {\n               handler(\n                 createAction(\n                   ActionsType.CHANGE_INITIAL_CONDITIONS,\n                   {balloonRadius: parseInt(e.target.value)}\n                 )\n               )\n             }}\n      />\n\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { ModelContextProvider } from './context/ModelContext'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ModelContextProvider>\n      <App/>\n    </ModelContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}